#pragma once
/**
 * Compute kernel between feature vector and support vector.
 * Kernel type: linear
 */
double compute_kernel(double x[45], ...) {
    va_list w;
    double kernel = 0.0;
    va_start(w, 45);
    for (uint16_t i = 0; i < 45; i++)
            kernel += x[i] *  va_arg(w, double) ;
    return kernel;
}
/**
 * Predict class for features vector
 */
int predict(double *x) {
    double kernels[7] = { 0 };
    double decisions[1] = { 0 };
    int votes[2] = { 0 };
        kernels[0] = compute_kernel(x,   -0.57  , -0.1  , 0.03  , -0.2  , -0.08  , 0.0  , -0.07  , -0.08  , -0.01  , 0.16  , 0.09  , -0.09  , 0.57  , 0.25  , -0.06  , 0.01  , -0.01  , -0.08  , 0.98  , 0.25  , -0.1  , 0.24  , 0.19  , -0.05  , -0.29  , -0.02  , -0.01  , -0.53  , -0.2  , 0.06  , -0.13  , 0.08  , 0.01  , 0.02  , 0.02  , 0.0  , 0.03  , 0.03  , -0.01  , 0.02  , 0.03  , -0.04  , 0.02  , 0.02  , -0.04 );
        kernels[1] = compute_kernel(x,   -0.59  , 0.06  , 0.03  , -0.29  , -0.04  , -0.03  , -0.18  , -0.02  , -0.01  , 0.22  , 0.03  , -0.03  , 0.28  , 0.09  , -0.06  , 0.57  , 0.07  , -0.06  , 0.17  , -0.3  , -0.07  , 0.71  , 0.26  , -0.23  , 0.03  , 0.11  , 0.05  , -0.32  , -0.03  , 0.05  , -0.49  , -0.11  , 0.02  , -0.17  , 0.0  , -0.01  , 0.03  , 0.02  , -0.02  , 0.03  , 0.03  , 0.01  , 0.03  , 0.03  , -0.02 );
        kernels[2] = compute_kernel(x,   -0.21  , 0.02  , 0.02  , -0.4  , -0.05  , 0.04  , -0.14  , 0.08  , -0.01  , -0.0  , 0.0  , 0.12  , 0.08  , -0.1  , -0.01  , 0.38  , 0.08  , -0.01  , 0.6  , 0.05  , -0.13  , 0.4  , -0.1  , -0.05  , 0.47  , 0.01  , -0.06  , 0.12  , 0.15  , -0.03  , -0.11  , 0.12  , 0.03  , -0.28  , -0.01  , -0.04  , -0.3  , -0.09  , 0.03  , -0.17  , -0.02  , 0.01  , 0.01  , 0.02  , -0.0 );
        kernels[3] = compute_kernel(x,   0.47  , -0.41  , 0.05  , 0.07  , -0.31  , 0.06  , 0.15  , -0.24  , 0.02  , 0.02  , -0.03  , -0.07  , -0.02  , -0.03  , -0.02  , -0.08  , 0.62  , -0.09  , -0.02  , 0.17  , -0.07  , 0.0  , 0.43  , 0.02  , -0.05  , 0.24  , -0.01  , 0.03  , 0.17  , 0.0  , 0.06  , -0.17  , 0.04  , 0.13  , -0.31  , -0.03  , 0.03  , -0.51  , 0.05  , 0.03  , 0.03  , -0.01  , 0.02  , 0.02  , 0.0 );
        kernels[4] = compute_kernel(x,   0.36  , -0.22  , -0.05  , -0.03  , -0.4  , -0.01  , 0.01  , -0.16  , -0.03  , 0.08  , 0.35  , -0.06  , 0.01  , -0.07  , 0.01  , -0.03  , 0.31  , 0.02  , -0.15  , 0.41  , -0.04  , -0.15  , 0.38  , -0.02  , 0.04  , 0.31  , 0.0  , -0.09  , 0.1  , 0.1  , -0.04  , 0.15  , 0.01  , 0.13  , -0.18  , 0.0  , 0.18  , -0.34  , 0.01  , 0.13  , -0.17  , -0.0  , 0.02  , 0.04  , -0.02 );
        kernels[5] = compute_kernel(x,   0.01  , -0.51  , 0.03  , -0.01  , -0.74  , -0.02  , 0.09  , 0.05  , -0.09  , -0.05  , 0.41  , 0.02  , -0.11  , 0.58  , -0.05  , -0.06  , 0.4  , -0.01  , 0.0  , 0.58  , -0.05  , 0.04  , 0.21  , -0.16  , -0.01  , -0.25  , 0.01  , 0.1  , -0.25  , 0.0  , 0.09  , -0.31  , -0.03  , 0.08  , -0.2  , -0.0  , 0.03  , 0.02  , -0.01  , 0.02  , 0.03  , -0.01  , 0.02  , 0.03  , -0.04 );
        kernels[6] = compute_kernel(x,   0.12  , -0.33  , -0.01  , 0.08  , -0.37  , 0.01  , 0.17  , -0.27  , -0.01  , 0.1  , -0.12  , -0.06  , -0.05  , 0.52  , 0.06  , -0.21  , 0.53  , -0.05  , -0.06  , 0.21  , -0.05  , -0.18  , 0.46  , -0.01  , -0.02  , 0.27  , 0.02  , 0.03  , 0.01  , -0.06  , 0.08  , -0.09  , -0.04  , 0.14  , -0.27  , -0.05  , 0.1  , -0.36  , 0.03  , 0.06  , -0.03  , -0.03  , 0.02  , 0.02  , -0.01 );
        double decision = 0;
decision = decision - ( + kernels[0] * -0.3100132789388169  + kernels[1] * -0.04469956541903445  + kernels[2] * -0.41233604612988084 );
decision = decision - ( + kernels[3] * 0.06551059680548893  + kernels[4] * 0.37791846376042276  + kernels[5] * 0.3016179352448897  + kernels[6] * 0.02200189467693077 );
return decision > 0 ? 0 : 1;
}
/**
 * Convert class idx to readable name
 */
const char* classIdxToName(uint8_t classIdx) {
    switch (classIdx) {
            case 0:
                return "ketchup";
            case 1:
                return "cock";
        default:
            return "UNKNOWN";
    }
}
